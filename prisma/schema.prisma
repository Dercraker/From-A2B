generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(nanoid(11))
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Payment
  stripeCustomerId String?
  plan             UserPlan @default(FREE)

  // Resend Email
  resendContactId String?

  // For the Credentials provider
  passwordHash String?

  sessions  Session[]
  accounts  Account[]
  feedbacks Feedback[]

  trips Trip[]
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id          String   @id @unique @default(cuid())
  userId      String
  name        String
  startDate   DateTime
  endDate     DateTime
  description String?
  image       String?

  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps       Step[]
}

model Step {
  id          String    @id @unique @default(cuid())
  tripId      String
  trip        Trip? @relation(fields: [tripId], references: [id], onDelete: Cascade)
  order       Int
  name        String
  startDate   DateTime?
  endDate     DateTime?
  description String?
  latitude    Decimal
  longitude   Decimal
}


enum UserPlan {
  FREE
  PREMIUM
}
