{
  "muhook": {
    "prefix": "muhook",
    "description": "Create react query mutation hook",
    "scope": "javascript,typescript",
    "body": [
      "\"use client\";",
      "",
      "import { isActionSuccessful } from \"@lib/actions/actions-utils\";",
      "import { useMutation, useQueryClient } from \"@tanstack/react-query\";",
      "import { toast } from \"sonner\";",
      "",
      "type ${1:${TM_FILENAME_BASE/([\\w]+)\\.([\\w]+)/${1:/camelCase}/g}}Props = {",
      "  $2",
      "};",
      "",
      "export const ${1:${TM_FILENAME_BASE/([\\w]+)\\.([\\w]+)/${1:/camelCase}/g}} = ({",
      "  $3",
      "}: ${1:${TM_FILENAME_BASE/([\\w]+)\\.([\\w]+)/${1:/camelCase}/g}}Props) => {",
      "  const queryClient = useQueryClient();",
      "",
      "  const { data, error, isPending, mutateAsync, isSuccess } = useMutation({",
      "    mutationFn: async ($4) => {",
      "      const result = await $5({",
      "        $6",
      "      });",
      "",
      "      if (!isActionSuccessful(result))",
      "        return toast.error(",
      "          \"${7:An error has occurred}\",",
      "          {",
      "            description: \"Please try again later or contact support\",",
      "          },",
      "        );",
      "      await queryClient.invalidateQueries({",
      "        queryKey: $8",
      "      });",
      "      return toast.success(\"$9\");",
      "    },",
      "  });",
      "",
      "  return { data, error, isPending, mutateAsync, isSuccess };",
      "};",
      "",
    ],
  },
}
